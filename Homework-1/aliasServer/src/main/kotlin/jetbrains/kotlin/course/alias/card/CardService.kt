package jetbrains.kotlin.course.alias.card

import jetbrains.kotlin.course.alias.util.Identifier
import jetbrains.kotlin.course.alias.util.IdentifierFactory
import jetbrains.kotlin.course.alias.util.Words
import jetbrains.kotlin.course.alias.util.GameStateService
import org.springframework.stereotype.Service

@Service
class CardService(
    private val gameStateService: GameStateService = GameStateService()
) {
    private val identifierFactory = IdentifierFactory()  // Unique identifier factory for card IDs
    private val usedCards = mutableListOf<Card>()  // Keeps track of used cards
    private val cards: List<Card> = generateCards()  // Cards list generated by the factory

    companion object {
        private const val WORDS_IN_CARD = 4
    }

    // Get the total number of cards
    fun getCardsAmount(): Int = Words.words.size / WORDS_IN_CARD

    init {
        // Load saved game state if available
        val savedState = gameStateService.loadGameState()
        if (savedState != null) {
            // Ensure the last assigned ID is correctly set from the saved state
            identifierFactory.setLastAssignedId(savedState.lastAssignedCardId)
            usedCards.addAll(savedState.usedCards)
        }
    }

    // Generate a list of unique cards
    private fun generateCards(): List<Card> {
        return (1..getCardsAmount()).map {
            val words = List(WORDS_IN_CARD) { Word(Words.getRandomWord()) }
            val card = Card(identifierFactory.uniqueIdentifier(), words)
            // Add the card to usedCards to track that itâ€™s been generated
            usedCards.add(card)
            card
        }
    }

    // Get card by index from the list
    fun getCardByIndex(index: Int): Card? = cards.getOrNull(index)

    // Save game state (including card data)
    fun saveGameState() {
        gameStateService.saveGameState(
            gameHistory = listOf(),
            teamsStorage = mapOf(),
            lastAssignedCardId = identifierFactory.getLastAssignedId(),
            lastAssignedTeamId = 0,
            usedWords = usedCards.flatMap { it.words.map { word -> word.content } },
            usedCards = usedCards
        )
    }

    fun resetCardsForNewGame() {
        usedCards.clear()  // Clear used cards
        identifierFactory.setLastAssignedId(0)  // Reset the identifier counter
    }
}
